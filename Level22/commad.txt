foobar:~/ Sumontasaha80$ request
Requesting challenge...
You got the bunny trainers to teach you a card game today, it's called Fizzbin. It's kind of pointless, but they seem to like it and it helps you pass the time while you work your way up to Commander Lambda's inner circle.

New challenge "Numbers Station Coded Messages" added to your home folder.
Time to solve: 168 hours.
foobar:~/ Sumontasaha80$ ls
journal.txt
numbers-station-coded-messages
start_here.txt
foobar:~/ Sumontasaha80$ ls numbers-station-coded-messages
Solution.java
constraints.txt
readme.txt
solution.py
foobar:~/ Sumontasaha80$ cat readme.txt
cat: readme.txt: No such file or directory
foobar:~/ Sumontasaha80$ ls
journal.txt
numbers-station-coded-messages
start_here.txt
foobar:~/ Sumontasaha80$ cd numbers-station-coded-messages
foobar:~/numbers-station-coded-messages Sumontasaha80$ ls
Solution.java
constraints.txt
readme.txt
solution.py
foobar:~/numbers-station-coded-messages Sumontasaha80$ cat readme.txt
Numbers Station Coded Messages
==============================
When you went undercover in Commander Lambda's organization, you set up a coded messaging system with Bunny Headquarters to allow them to send you important mission updates. Now that you're here and promoted to Henchman, you need to make sure you can receive those messages -- but since you need to sneak them past Commander Lambda's spies, it won't be easy!

Bunny HQ has secretly taken control of two of the galaxy's more obscure numbers stations, and will use them to broadcast lists of numbers. They've given you a numerical key, and their messages will be encrypted within the first sequence of numbers that adds up to that key within any given list of numbers.

Given a non-empty list of positive integers l and a target positive integer t, write a function solution(l, t) which verifies if there is at least one consecutive sequence of positive integers within the list l (i.e. a contiguous sub-list) that can be summed up to the given target positive integer t (the key) and returns the lexicographically smallest list containing the smallest start and end indexes where this sequence can be found, or returns the array [-1, -1] in the case that there is no such sequence (to throw off Lambda's spies, not all number broadcasts will contain a coded message).

For example, given the broadcast list l as [4, 3, 5, 7, 8] and the key t as 12, the function solution(l, t) would return the list [0, 2] because the list l contains the sub-list [4, 3, 5] starting at index 0 and ending at index 2, for which 4 + 3 + 5 = 12, even though there is a shorter sequence that happens later in the list (5 + 7). On the other hand, given the list l as [1, 2, 3, 4] and the key t as 15, the function solution(l, t) would return [-1, -1] because there is no sub-list of list l that can be summed up to the given target value t = 15.

To help you identify the coded broadcasts, Bunny HQ has agreed to the following standards:

- Each list l will contain at least 1 element but never more than 100.
- Each element of l will be between 1 and 100.
- t will be a positive integer, not exceeding 250.
- The first element of the list l has index 0.
- For the list returned by solution(l, t), the start index must be equal or smaller than the end index.

Remember, to throw off Lambda's spies, Bunny HQ might include more than one contiguous sublist of a number broadcast that can be summed up to the key. You know that the message will always be hidden in the first sublist that sums up to the key, so solution(l, t) should only return that sublist.

Languages
=========

To provide a Python solution, edit solution.py
To provide a Java solution, edit Solution.java

Test cases
==========
Your code should pass the following test cases.
Note that it may also be run against hidden test cases not shown here.

-- Python cases --
Input:
solution.solution([1, 2, 3, 4], 15)
Output:
    -1,-1

Input:
solution.solution([4, 3, 10, 2, 8], 12)
Output:
    2,3

-- Java cases --
Input:
Solution.solution({1, 2, 3, 4}, 15)
Output:
    -1,-1

Input:
Solution.solution({4, 3, 10, 2, 8}, 12)
Output:
    2,3

Use verify [file] to test your solution and see how it does. When you are finished editing your code, use submit [file] to submit your answer. If your solution passes the test cases, it will be removed from your home folder.
foobar:~/numbers-station-coded-messages Sumontasaha80$ cat constraints.txt
Java
====
Your code will be compiled using standard Java 8. All tests will be run by calling the solution() method inside the Solution class

Execution time is limited.

Wildcard imports and some specific classes are restricted (e.g. java.lang.ClassLoader). You will receive an error when you verify your solution if you have used a restricted class.

Third-party libraries, input/output operations, spawning threads or processes and changes to the execution environment are not allowed.

Your solution must be under 32000 characters in length including new lines and other non-printing characters.

Python
======
Your code will run inside a Python 2.7.13 sandbox. All tests will be run by calling the solution() function.

Standard libraries are supported except for bz2, crypt, fcntl, mmap, pwd, pyexpat, select, signal, termios, thread, time, unicodedata, zipimport, zlib.

Input/output operations are not allowed.

Your solution must be under 32000 characters in length including new lines and other non-printing characters.
foobar:~/numbers-station-coded-messages Sumontasaha80$ edit Solution.java
foobar:~/numbers-station-coded-messages Sumontasaha80$ verify Solution.java
Verifying solution...
Test 1 failed 
Test 2 failed 
Test 3 failed  [Hidden]
Test 4 failed  [Hidden]
Test 5 failed  [Hidden]
foobar:~/numbers-station-coded-messages Sumontasaha80$ verify Solution.java
Verifying solution...
Test 1 failed 
Test 2 failed 
Test 3 failed  [Hidden]
Test 4 failed  [Hidden]
Test 5 failed  [Hidden]
foobar:~/numbers-station-coded-messages Sumontasaha80$ verify Solution.java
Verifying solution...
Test 1 failed 
Test 2 failed 
Test 3 failed  [Hidden]
Test 4 failed  [Hidden]
Test 5 failed  [Hidden]
foobar:~/numbers-station-coded-messages Sumontasaha80$ verify Solution.java
Verifying solution...
All test cases passed. Use submit Solution.java to submit your solution
foobar:~/numbers-station-coded-messages Sumontasaha80$ submit Solution.java
Are you sure you want to submit your solution?
[Y]es or [N]o: Y
Submitting solution...
Awesome! Commander Lambda was so impressed by your efforts that you've been promoted to personal assistant. You'll be helping the Commander directly, which means you'll have access to all of Lambda's files -- including the ones on the LAMBCHOP doomsday device. This is the chance you've been waiting for. Can you use your new access to finally topple Commander Lambda's evil empire?

Submission: SUCCESSFUL. Completed in: 16 mins, 23 secs..